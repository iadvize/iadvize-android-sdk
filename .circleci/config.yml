version: 2.1

orbs:
  android: circleci/android@3.0.1
  go: circleci/go@1.7.3

# ================================================================
# Triggers

on-version-tags: &on-version-tags
  filters:
    tags:
      only: /^[0-9]*\.[0-9]*\.[0-9]*$/
    branches:
      ignore: /.*/

# ================================================================
# Executors

android-docker-executor: &android-docker-executor
  executor:
    name: android/android_docker
    resource_class: large
    tag: 2024.11.1

go-machine-executor: &go-machine-executor
  executor:
    name: go/default
    tag: '1.19.2'

# ================================================================
# Commands

commands:
  checkout-git-repo:
    steps:
      - add_ssh_keys:
          fingerprints: "SHA256:MQy96z4jnXqgzvsaokado+cUHPF8/W33b3OqOBosxeo"
      - checkout
      - run:
          name: "Checkout git submodules"
          command: |
            git submodule sync
            git submodule update --init
      - run:
          name: "Read SDK config"
          command: |
            SDK_VERSION_NAME=$(grep 'iadvize-sdk = "' example/gradle/libs.versions.toml | sed 's/iadvize-sdk = "\(.*\)"/\1/')
            SDK_RELEASE_NAME=$(grep '# '"${SDK_VERSION_NAME}"' (' CHANGELOG.md | sed 's/# '"${SDK_VERSION_NAME}"' (\(.*\))/\1/')
            SDK_RELEASE_TITLE="$SDK_VERSION_NAME ($SDK_RELEASE_NAME)"
            SDK_RELEASE_NOTES=$(sed '1,4 d' CHANGELOG.md | sed '/# /q' | sed '$d' | sed '$d')
            echo "Version name is $SDK_VERSION_NAME"
            echo "Release name is $SDK_RELEASE_NAME"
            echo "Release title is $SDK_RELEASE_TITLE"
            echo "Release note are:"
            echo "$SDK_RELEASE_NOTES"
            echo "Save them into BASH_ENV ($BASH_ENV)"
            echo "export SDK_VERSION_NAME=\"$SDK_VERSION_NAME\"" >> $BASH_ENV
            echo "export SDK_RELEASE_NAME=\"$SDK_RELEASE_NAME\"" >> $BASH_ENV
            echo "export SDK_RELEASE_TITLE=\"$SDK_RELEASE_TITLE\"" >> $BASH_ENV
            echo "export SDK_RELEASE_NOTES=\"$SDK_RELEASE_NOTES\"" >> $BASH_ENV

  build-integration-project:
    steps:
      - run: cd example; ./gradlew clean build --no-daemon --max-workers=2 --info

  download-latest-sdk:
    steps:
      - run:
          name: "Download latest SDK"
          command: |
            repo_url="https://api.github.com/repos/iadvize/mobile-android-sdk-conversation-library"
            release_json=$(curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GITHUB_TOKEN}" "${repo_url}/releases/tags/${SDK_VERSION_NAME}")
            asset_ids=($(echo "${release_json}" | grep "\"url\": \"${repo_url}/releases/assets/" | sed "s#\(.*\)/releases/assets/\(.*\)\"\(.*\)#\2#"))
            for asset_id in "${asset_ids[@]}";
            do
                curl -LJO -H 'Accept: application/octet-stream' -H "Authorization: Bearer ${GITHUB_TOKEN}" "${repo_url}/releases/assets/${asset_id}"
            done

  prepare-artifacts:
    steps:
      - run:
          name: "Prepare artifacts"
          command: |
            mkdir artifacts
            downloaded_files=("IAdvizeSDK.zip" "verification-metadata.xml" "IAdvizeSDK.checksums")
            for downloaded_file in "${downloaded_files[@]}";
            do
                if ! [ -f "${downloaded_file}" ]; then
                    echo "ERROR: can't find ${downloaded_file}"
                    exit 1
                else
                    mv "${downloaded_file}" artifacts
                fi
            done

  create-github-release:
    steps:
      - run:
          name: "Create GitHub release"
          command: |
            echo "Create release \"${SDK_RELEASE_TITLE}\" on GitHub"
            go install github.com/tcnksm/ghr@v0.16.2
            ghr -t "${GITHUB_TOKEN}" -u "${CIRCLE_PROJECT_USERNAME}" -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" -n "${SDK_RELEASE_TITLE}" -b "${SDK_RELEASE_NOTES}" "${SDK_VERSION_NAME}" artifacts/

# ================================================================
# Jobs

jobs:
  build:
    description: "Check integration project build"
    <<: *android-docker-executor
    steps:
      - checkout-git-repo
      - build-integration-project

  release:
    description: "Release SDK on GitHub"
    <<: *go-machine-executor
    steps:
      - checkout-git-repo
      - download-latest-sdk
      - prepare-artifacts
      - create-github-release

# ================================================================
# Workflows

workflows:
  release:
    jobs:
      - build: *on-version-tags
      - release:
          <<: *on-version-tags
          requires:
            - build
